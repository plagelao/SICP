---
layout: post
title: Section 1.2.1
date: 2011-06-29 13:00:00 +00:00
categories:
  - sicp
  - scheme
  - lisp
---
We start this section talking about recursion and iteration. I've always thought that recursion was when a procedure calls itself, but I was wrong, thats only procedure recursion. There is another type of recursion, what the authors call process recursion, and it is possible that a recursive procedure generates a non recursive process (an iterative process). If you want to know more about it, the authors explained really well [at the begining of section 1.2](http://www-mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2)
In order to understand those concept, the authors propose two exercises:

- 1.9 Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.

        (define (+ a b)
         (if (= a 0)
          b
          (inc (+ (dec a) b))))

        (define (+ a b)
         (if (= a 0)
          b
          (+ (dec a) (inc b))))

  Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

  Here you can see my anwser:

  - First procedure

        (+ 4 5)
        (inc (+ (dec 4) 5))
        (inc (+ 3 5))
        (inc (inc(+ 2 5)))
        (inc (inc(inc(+ 1 5))))
        (inc (inc(inc(inc(+ 0 5)))))
        (inc (inc(inc(inc 5))))
        (inc (inc(inc 6)))
        (inc (inc 7))
        (inc 8)
        9

  - Second procedure

        (+ 4 5)
        (+ (dec 4) inc(5))
        (+ 3 6)
        (+ 2 7)
        (+ 1 8)
        (+ 0 9)
        9

  Based on that, I have to say that the first process is recursive and the second one is iterative.

- 1.10 The following procedure computes a mathematical function called Ackermann's function.

        (define (A x y)
         (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1)
                 (A x (- y 1))))))

  What are the values of the following expressions?

        (A 1 10)

        (A 2 4)

        (A 3 3)

  **You can see my awnser [here](https://github.com/plagelao/SICP/blob/master/exercises/chapter-1/exercise-10.scm)**

  Consider the following procedures, where A is the procedure defined above:

        (define (f n) (A 0 n))

        (define (g n) (A 1 n))

        (define (h n) (A 2 n))

        (define (k n) (* 5 n n))

  Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n2.

  Let's start with the easy one, (f n).

        (A 0 n)
        (* 2 n)

  So (f n) computes 2n. Let's have a look at (g n).

        (A 1 n)
        (A (- 1 1) (A 1 (- n 1)))
        (A 0 (A 1 (- n 1)))
        ...
        (A 0 (A 0 (A 0 ... (A 0 (A 1 1))...)))
        (A 0 (A 0 (A 0 ... (A 0 2)...)))
        (A 0 (A 0 (A 0 ... (* 2 2)...)))
        (* 2 (* 2 (* 2 ... (* 2 2)...)))

  So, (g n) computes 2^n. Now the last one, (h n).

        (A 2 n)
        (A 1 (A 2 (- 1 n))
        ...
        (A 1 (A 1 (A 1 ... (A 1 (A 2 1))...)))
        (A 1 (A 1 (A 1 ... (A 1 2)...)))
        (g (g (g ... (g 2)...)))

  So, (h n) computes to something I don't know how to express with mathematical notation :) but it seems to be something like 2 &uarr;&uarr; n.

Ok, enough for today... See you on the Section 1.2.2!
