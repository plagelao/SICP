---
layout: post
title: Section 1.2.4
date: 2011-07-06 11:00:00 +00:00
categories:
  - sicp
  - scheme
  - lisp
---
More mathematics! Now is exponentiation turn. Let's have a look at the exercises for this section:

- Exercise 1.16 Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does fast-expt.

  My solution for this exercise is:

        (define (iter-fast-exp b n)
          (define (iter-exp b n a)
            (cond ((= n 0) a)
                  ((even? n) (iter-exp (* b b) (/ n 2) a))
                  (else (iter-exp b (- n 1) (* a b)))))
          (iter-exp b n 1))

  Its order of growth in number of steps is logarithmic because we only need another step if we double n.

- Exercise 1.17 The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the expt procedure:

        (define (* a b)
         (if (= b 0)
          0
          (+ a (* a (- b 1)))))

  This algorithm takes a number of steps that is linear in b. Now suppose we include, together with addition, operations double, which doubles an integer, and halve, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to fast-expt that uses a logarithmic number of steps.

  Ok so, given the following procedures:

        (define (double a)
          (+ a a))

        (define (halve a)
          (/ a 2))

  The solution to the exercises is:

        (define (fast-multi a b)
          (cond ((= b 0) 0)
                ((even? b) (double (fast-multi a (halve b))))
                (else (+ a (fast-multi a (- b 1))))))

  Again, its order of growth in number of steps is logarithmic because we only need another step if we double b (and it is constant if we keep b fix and change a).

- Exercise 1.18 Using the results of exercises 1.16 and 1.17, devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.

  My solution is:

        (define (iter-multi a b)
          (iterative-multiplication a b 0))
        (define (iterative-multiplication a b m)
          (cond ((= b 0) m)
                ((even? b) (iterative-multiplication (double a) (halve b) m))
                (else (iterative-multiplication a (- b 1) (+ a m)))))


- Exercise 1.19 There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables a and b in the fib-iter process of section 1.2.2: a <-- a + b and b <-- a. Call this transformation T, and observe that applying T over and over again n times, starting with 1 and 0, produces the pair Fib(n + 1) and Fib(n). In other words, the Fibonacci numbers are produced by applying Tn, the nth power of the transformation T, starting with the pair (1,0). Now consider T to be the special case of p = 0 and q = 1 in a family of transformations Tpq, where Tpq transforms the pair (a,b) according to a <-- bq + aq + ap and b <-- bp + aq. Show that if we apply such a transformation Tpq twice, the effect is the same as using a single transformation Tp'q' of the same form, and compute p' and q' in terms of p and q. This gives us an explicit way to square these transformations, and thus we can compute Tn using successive squaring, as in the fast-expt procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps:

        (define (fib n)
         (fib-iter 1 0 0 1 n))
        (define (fib-iter a b p q count)
         (cond ((= count 0) b)
          ((even? count)
           (fib-iter a
            b
            <??>      ; compute p'
            <??>      ; compute q'
            (/ count 2)))
          (else (fib-iter (+ (* b q) (* a q) (* a p))
                 (+ (* b p) (* a q))
                 p
                 q
                 (- count 1)))))

  Ok, first of all, we need to know what p' and q' are. Let's do some more mathematics:

        a' = bq + aq + ap
        b' = bp + aq

  So, if we apply the same transformation again:

        b'' = b'p + a'q = (p^2 + q^2)b + (q^2 + 2pq)a
        a'' = b'q + a'q + a'p = (p^2 + 2pq + 2q^2)a + (2qp + q^2)b = (2qp + q^2)b + (2qp + q^2)a + (p^2 + q^2)a

  Which gives us:

        p' = p^2 + q^2
        q' = q^2 + 2pq

  So, the final solution is:

        (define (clever-fib n)
         (define (fib-iter a b p q count)
          (cond ((= count 0) b)
           ((even? count)
            (fib-iter a
             b
             (+ (* q q) (* p p))
             (+ (* q q) (* 2 p q))
             (/ count 2)))
           (else (fib-iter (+ (* b q) (* a q) (* a p))
                  (+ (* b p) (* a q))
                  p
                  q
                  (- count 1)))))
         (fib-iter 1 0 0 1 n))


And that is all for today. As always, you can have a look to [my github repository](https://github.com/plagelao/SICP/tree/master/exercises/chapter-1) to see the solutions.
