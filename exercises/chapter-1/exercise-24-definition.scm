(define (fast-smallest-divisor n)
  (define (next n)
    (if (= n 2)
      3
      (+ n 2)))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (next test-divisor)))))
  (define (divides? a b)
    (= (remainder b a) 0))
  (find-divisor n 2))

(define (fast-search-for-primes minimum maximum time)
  (define (fast-timed-prime-test n)
    (define (prime? n)
      (= n (fast-smallest-divisor n)))
    (define (start-prime-test n start-time)
      (if (prime? n)
        (- (runtime) start-time)
        0))
    (start-prime-test n (runtime)))

  (cond ((= minimum maximum) time)
        (else (fast-search-for-primes (+ minimum 1) maximum (+ time (fast-timed-prime-test minimum))))))
