(define (miller-rabin-test number)
  (define (exp-modulo base exp)
    (define (square-modulo n)
      (remainder (square n) number))
    (define (square-module-with-check n)
      (if (and (= (square-modulo n) 1)
               (not (= n 1))
               (not (= n (- number 1))))
          0
          (square-modulo n)))
    (cond ((= exp 0) 1)
          ((even? exp)
           (square-module-with-check (exp-modulo base (/ exp 2))))
          (else
            (remainder (* base (exp-modulo base (- exp 1)))
                       number))))
  (define (try-it a)
    (= (exp-modulo a (- number 1)) 1))
  (try-it (+ 1 (random (- number 1)))))
